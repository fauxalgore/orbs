version: 2.1

description: |
  Sandbox for prototyping orbs

defaults: &defaults
  docker:
  - image: quay.io/pantheon-public/build-tools-ci:4.x
  working_directory: ~/sitedir
  environment:
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    ADMIN_USERNAME: admin
    BUILD_TOOLS_VERSION: dev-master
    TERM: dumb

commands:
  setbashenv:
    description: "Copy the bash_env from the first job so that TERMINUS_ENV persists."
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - run: cp /tmp/workspace/bash_env.txt $BASH_ENV
  npmci_and_cache:
    parameters:
      package_lock_location:
        type: string
      build_command:
        type: string
    steps:
      - run: echo "hello <<parameters.package_lock_location>>, from the inline command"
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "<<parameters.package_lock_location>>/package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-
      - run: cd <<parameters.package_lock_location>> && npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: node-v1-{{ .Branch }}-{{ checksum "<<parameters.package_lock_location>>/package-lock.json" }}
      - run: cd <<parameters.package_lock_location>> && <<parameters.build_command>>

  # todo, merge with the composer installing happening in the build job.
  composer_install_and_cache:
    description: "Restore composer cache, do a composer install, cache again."
    steps:
        - restore_cache:
            keys:
                - composer-{{ checksum "composer.lock" }}
        - run: composer install --optimize-autoloader --ignore-platform-reqs
        - save_cache:
            key: composer-{{ checksum "composer.lock" }}
            paths:
                - $HOME/.composer/cache

  composer_install_no_dev:
    description: "Restore composer cache, do a composer install, cache again."
    steps:
      - restore_cache:
            keys:
              - composer-no-dev-{{ .Branch }}-{{ checksum "composer.lock" }}
              - composer-no-dev-{{ .Branch }}-
              - composer-no-dev-
      - run: composer -n --optimize-autoloader --ignore-platform-reqs --no-dev
      - save_cache:
          key: composer-no-dev-{{ .Branch }}-{{ checksum "composer.lock" }}
          paths:
          - $HOME/.composer/cache



jobs:
  unit:
    <<: *defaults
    steps:
    - checkout
    - run: /build-tools-ci/scripts/set-environment
    - composer_install_and_cache
    - run:
        name: Lint PHP code for syntax errors
        command: composer -n lint
    - run:
        name: Check coding standards
        command: composer -n code-sniff
    - run:
        name: Run unit tests
        command: composer -n unit-test


  npmbuild_and_persist:
    docker:
      - image: node:10.15.3

    parameters:
      path_to_persist:
        type: string
      package_lock_location:
        type: string
      build_command:
        type: string
    steps:
      - checkout
      - npmci_and_cache:
          package_lock_location: <<parameters.package_lock_location>>
          build_command: <<parameters.build_command>>
      - persist_to_workspace:
          root: .
          paths:
            - <<parameters.path_to_persist>>

  build:
    <<: *defaults
    steps:
    - run: echo "use PUSH job instead"

  push:
    <<: *defaults
    steps:
    - run: echo "TODO check that the orb job has all required variables."
    - run: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

    - run:
        name: Delete old Multidevs and other prepare steps
        command: terminus -n build:env:delete:ci "$TERMINUS_SITE" --keep=2 --yes

    - run:
        name: deploy
        command: |
          # Create a new multidev site to test on
          terminus -n env:wake "$TERMINUS_SITE.dev"
          terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes --clone-content

    - run: cp $BASH_ENV bash_env.txt
    - persist_to_workspace:
        root: .
        paths:
        - bash_env.txt

  merge:
      <<: *defaults
      steps:
          - setbashenv
          - run: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"
          - run: git remote add pantheon $(terminus connection:info $TERMINUS_SITE.dev --field=git_url)
          - run:
              name: Merge
              command: |
                if [[ $CI_BRANCH != "master" ]] ; then
                  exit 0
                fi
                # Merge the multidev for the PR into the dev environment
                terminus -n build:env:merge "$TERMINUS_SITE.$TERMINUS_ENV" --yes
                # Delete old multidev environments associated with a PR that has been
                # merged or closed.
                terminus -n build:env:delete:pr "$TERMINUS_SITE" --yes

  backstop:
    docker:
    - image: backstopjs/backstopjs:3.9.5
    steps:
    - setbashenv
    - run: backstop reference --config=backstop/backstop-config.js
    - run: backstop test --config=backstop/backstop-config.js || echo "backstop failed but this message suppresses a failure of the entire script. The reporting script will detect the fail"
    - store_artifacts:
        path: backstop_data

    - run:
        name: Report
        command: |
              CIRCLE_ARTIFACTS_URL=${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}/root/project
              IMAGE=$(find -- backstop_data/bitmaps_test -type f -name "*.png" | head -n 1)
              REPORT_URL=${CIRCLE_ARTIFACTS_URL}/backstop_data/html_report/index.html
              BODY="### Visual regression report:\\n\\n[![Visual report](${CIRCLE_ARTIFACTS_URL}/${IMAGE})]($REPORT_URL)"
              {
                GITHUB_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commits/${CIRCLE_SHA1}/comments?access_token=${GITHUB_TOKEN}"
                curl -d '{ "body": "'"${BODY}"'" }' -X POST "${GITHUB_URL}"
              } &> /dev/null
